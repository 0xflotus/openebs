# k8s-jupyter-pod.yml
# Description: Deploy Jupyter application using OpenEBS volume.

###############################################################################################
#Test Steps:
#1. Check whether the OpenEBS components are deployed.
#2. Download the test artifacts to k8s master.
#3. Deploy Jupyter application.
#4. Check if the application pod is up and running
#5. Check if the Jupyter service us up.
#6. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-jupyter-pod-vars.yml

  tasks:

   - block:

       - name: 1) Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 2) Download YAML for jupyter notebook server plugin
         get_url:
           url: "{{ jupyter_plugin_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 2b) Check whether maya-apiserver is deployed
         shell: source ~/.profile; kubectl get pods | grep maya-apiserver
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         until: "'Running' in result.stdout"
         delay: 120
         retries: 5

       - name: 2c) Replace volume size in plugin YAML
         lineinfile:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regexp: "storage:"
           line: "      storage: \"{{jupyter_server_vol_size}}\""
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 3) Deploy jupyter notebook server pod
         shell: source ~/.profile; kubectl create -f {{ pod_yaml_alias }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4) Confirm pod status is running
         shell: source ~/.profile; kubectl get pods | grep jupyter
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'jupyter' and 'Running' in result.stdout"
         delay: 120
         retries: 15

       - name: 5) Verify that the jupyter notebook server is a cluster service
         shell: source ~/.profile; kubectl get svc
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_service
         failed_when: "'jupyter-service' not in result_service.stdout"

       - name: setting flag if pass
         set_fact:
           flag: "Pass"

     rescue:
       - name: setting flag if fail
         set_fact:
           flag: "Fail"

     always:

       - name: 6) Cleaning up the test artifacts
         include: k8s-jupyter-pod-cleanup.yml
         when: clean | bool

       - name: Send slack notification
         slack:
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN')

