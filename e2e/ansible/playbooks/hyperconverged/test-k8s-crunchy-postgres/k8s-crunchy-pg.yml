# k8s-crunchy-pg.yml
# Description: Deploy postgress application

###############################################################################################
#Test Steps:
#1. Install the packages and dependencies.
#2. Check whether the OpenEBS components are deployed.
#3. Download the test artifacts to k8s master.
#4. Modify the size and obtain the number of statefulset
#5. Deploy the postgress application by executing the shell script.
#6. Check if the application pod is up and running
#7. Check if the postgress master and replica services are running.
#8. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-crunchy-pg-vars.yml

  tasks:

   - block:

       - name: 1) Install the prerequisites
         include: k8s-crunchy-pg-prerequisites.yml

       - name: 2) Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 2a) Check whether maya-apiserver pod is deployed
         shell: source ~/.profile; kubectl get pods | grep maya-apiserver
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         until: "'Running' in result.stdout"
         delay: 120
         retries: 5

       - name: 3) Replace 'tree/master' with 'trunk' in the crunchy-postgres link
         debug:
           msg={{ crunchy_pg_git_dir | regex_replace('tree/master', 'trunk')}}
         register: git_svn_link

       - name: 3a) Set the modified link as a fact
         set_fact:
           crunchy_dir: "{{ git_svn_link.msg }}"

       - name: 3b) Download the crunch-postgres folder kubemaster home
         subversion:
           repo: "{{ crunchy_dir }}"
           export: yes
           dest: "{{ result_kube_home.stdout }}/crunchy-postgres"
           force: yes
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4) Replace volume size in set.json
         lineinfile:
           path: "{{ result_kube_home.stdout }}/crunchy-postgres/set.json"
           regexp: "\"storage\":"
           line: "              \"storage\": \"{{postgres_vol_size}}\""
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4a) Get the number of statefulset details from set.json
         command: cat {{ result_kube_home.stdout }}/crunchy-postgres/set.json
         register: jsonfile
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4b) Register the app label
         set_fact:
           label: "{{(jsonfile.stdout | from_json).spec.template.metadata.labels.app}}"

       - name: 4c) Register the replica variable
         set_fact:
           replicas: "{{(jsonfile.stdout | from_json).spec.replicas}}"

       - name: 4d) Comment the cleanup step in the run.sh with
         lineinfile:
           path: "{{ result_kube_home.stdout }}/crunchy-postgres/run.sh"
           regexp: 'cleanup.sh'
           line: '#$DIR/cleanup.sh'
           backup: yes
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source ~/.profile;
           nohup stern "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" &
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 5) Run the shell script to setup postgres cluster
         shell: source ~/.profile; ./run.sh
         args:
           chdir: "{{ result_kube_home.stdout }}/crunchy-postgres"
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 6) Confirm the postgres statefulset is running
         shell: source ~/.profile; kubectl get pods --selector=app={{ label }} | grep Running | wc -l
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: setup
         until: "replicas in setup.stdout"
         delay: 120
         retries: 15

       - name: 7) Verify that the postgres master and replica are available as cluster services
         shell: source ~/.profile; kubectl get svc
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_service
         failed_when: "'pgset-master' and 'pgset-replica' not in result_service.stdout"

       - name: Terminate the log aggregator
         shell: source ~/.profile; killall stern
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: setting flag if pass
         set_fact:
           flag: "Pass"

     rescue:
       - name: setting flag if fail
         set_fact:
           flag: "Fail"

     always:

       - name: 8) Cleaning up the test artifacts
         include: k8s-crunchy-pg-cleanup.yml
         when: clean | bool

       - name: Send slack notification
         slack:
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN')





