# k8s-percona-pod.yml
# Description: Deploy percona application using OpenEBS volume.

###############################################################################################
#Test Steps:
#1. Install the prerequisites ans dependencies
#2. Download the test artifacts to k8s master.
#3. Check whether the OpenEBS components are deployed.
#4. Deploy Percona application.
#5. Check if the application pod is up and running
#6. Check if the Percona service us up.
#7. Copy files to the K8s node.
#8. Pull mysql client image and generate load
#9. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-percona-pod-vars.yml

  tasks:
   - block:

       - name: 1) Install the prerequisites
         include: k8s-percona-pod-prerequisites.yml

       - name: 2) Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 2a) Download YAML for percona mysql plugin
         get_url:
           url: "{{ percona_mysql_plugin_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 3) Check whether maya-apiserver pod is deployed
         shell: source ~/.profile; kubectl get pods | grep maya-apiserver
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         until: "'Running' in result.stdout"
         delay: 120
         retries: 5

       - name: 3a) Replace volume-claim name with test parameters
         replace:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regexp: '{{ item.0 }}'
           replace: '{{ item.1 }}'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         with_together:
           - "{{replace_item}}"
           - "{{replace_with}}"

       - name: 3b) Replace volume size in plugin YAML
         lineinfile:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regexp: "storage:"
           line: "      storage: \"{{percona_mysql_vol_size}}\""
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source ~/.profile;
           nohup stern "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" &
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4) Deploy percona mysql pod
         shell: source ~/.profile; kubectl create -f {{ pod_yaml_alias }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 5) Confirm pod status is running
         shell: source ~/.profile; kubectl get pods | grep percona
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 120
         retries: 15

       - name: 6) Get $HOME of K8s minion for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: 6a) Get IP address of percona mysql pod
         shell: source ~/.profile; kubectl describe pod percona
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_IP

       - name: 6b) Set IP of Pod to variable
         set_fact:
           pod_ip: "{{ result_IP.stdout_lines[7].split()[1] }}"

       - name: 7) Copy files into kube minion
         copy:
           src: "{{ item }}"
           dest: "{{ result_kube_home.stdout }}"
         with_items: "{{ files }}"
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: 8) Pull the mysql-client image
         docker_image:
           name: openebs/tests-mysql-client
           state: present
           timeout: 120
         become: true
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: 8a) mysql-client docker instantiate
         docker_container:
           name: client
           image: openebs/tests-mysql-client
           network_mode: host
           command: timelimit -t {{ mysql_load_duration }} sh MySQLLoadGenerate.sh {{ pod_ip }} > /dev/null 2>&1
           state: started
         become: true
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: Terminate the log aggregator
         shell: source ~/.profile; killall stern
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: setting flag if pass
         set_fact:
           flag: "Pass"

     rescue:
       - name: setting flag if fail
         set_fact:
           flag: "Fail"

     always:

       - name: 9) Cleaning up the test artifacts.
         include: k8s-percona-pod-cleanup.yml
         when: clean | bool

       - name: Send slack notification
         slack:
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN')
