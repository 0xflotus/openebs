# test-ctrl-failure.yml
# Author: Karthik
# Description: Include resiliency test suite in OpenEBS e2e (Test: periodic controller failures)
###############################################################################################
#Test Steps:
#1. Copy Test artifacts to Kubemaster.
#2. Deploy Percona application with liveness probe running db queries continuously.
#3. Create chaoskube infrastructer to induce failures.
#4. Gather Node,Replica Container and chaoskube pod details required for test.
#5. Initiate periodic controller failures from chaoskube
#6. Check percona application status to veriy openebs replica sustain network failures.
#7. Verify successful Fault Injection via end marker
#8. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost
 
  vars_files: 
    - test-ctrl-failure-vars.yml 
 
  tasks:
   - block:

       ###################################################
       #                PREPARE FOR TEST                 #
       # (Place artifacts in kubemaster, start logger &  # 
       # confirm OpenEBS operator is ready for requests. #
       ###################################################

       - name: Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args: 
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
      
       - name: Get percona spec and liveness scripts
         get_url:
           url: "{{ item }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         with_items: "{{ percona_links }}"

       - name: Replace volume-claim name with test parameters
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/regex_task.yml"
         vars:
           path: "{{ result_kube_home.stdout }}/percona.yaml"
           regex1: "{{replace_item}}"
           regex2: "{{replace_with}}"

       - name: Copy the chaoskube specs to kubemaster  
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/copy_task.yml"
         vars:
           destination_node: "{{groups['kubernetes-kubemasters'].0}}"
           files_to_copy: "{{ chaoskube_files }}"            

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source ~/.profile;
           nohup stern "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" &
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Check status of maya-api server
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            app: maya-api

       ####################################################
       #          SETUP FAULT-INJECTION ENV               #
       # (Setup chaoskube deployment with an empty policy,#
       # deploy percona w/ a liveness check for DB writes)# 
       ####################################################

       - name: Setup the chaoskube infrastructure
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ chaoskube_files }}"

       - name: Check whether chaoskube infrastructure is created
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            app: chaoskube

       - name: Set chaoskube pod name to variable 
         set_fact: 
           chaospod: "{{ result.stdout_lines[0].split()[0] }}"

       - name: Create a configmap with the liveness sql script 
         shell: source ~/.profile; kubectl create configmap sqltest --from-file={{ percona_files.1 }} 
         args: 
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result 
         failed_when: "'configmap' and 'created' not in result.stdout"

       - name: Create percona deployment with OpenEBS storage
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ percona_files.0 }}"

       - name: Check whether percona application is running
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            app: percona

       - name: Wait for 120s to ensure liveness check starts 
         wait_for:
           timeout: 120
         
       - name: Get the name of the volume ctrl deployment 
         shell: > 
           source ~/.profile; kubectl get deployments 
           -l openebs/controller=jiva-controller --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_deploy

       - name: Set the ctrl deployment name to variable 
         set_fact: 
           ctrl_deploy: "{{ result_deploy.stdout_lines[0].split()[0] }}"

       ########################################################
       #        INJECT FAULTS FOR SPECIFIED PERIOD            #
       # (Obtain begin marker before fault-inject(FI),do ctrl # 
       # failures, verify successful FI via end marker)       # 
       ########################################################

       - name: Get the resourceVersion of the controller deployment
         shell: >
           source ~/.profile; kubectl get deploy 
           {{ ctrl_deploy }} -o yaml | grep resourceVersion
           | awk '{print $2}' | sed 's|"||g'
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: rv_bef          
 
       - name: Initiate periodic controller failures from chaoskube
         shell: >
           source ~/.profile; kubectl exec {{ chaospod }}  
           -- timeout -t {{ chaos_duration }} chaoskube 
           --labels 'openebs/controller=jiva-controller'
           --no-dry-run --interval={{ chaos_interval }}s 
           --debug
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: chaos_result
         ignore_errors: true 

       - name: Get the resourceVersion of the controller deployment
         shell: >
           source ~/.profile; kubectl get deploy 
           {{ ctrl_deploy }} -o yaml | grep resourceVersion
           | awk '{print $2}' | sed 's|"||g'
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: rv_aft    
 
       - name: Compare resourceVersions of controller deployments 
         debug: 
           msg: "Verified controller pods were restarted by chaoskube"
         failed_when: "rv_bef.stdout | int == rv_aft.stdout | int"

       ########################################################
       #        VERIFY RESILINCY/FAULT-TOLERATION             #
       # (Confirm liveness checks on percona are successful & #
       # pod is still in running state)                       #
       ########################################################

       - name: Confirm percona pod is still running
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/status_running.yml"
         vars:
            app: percona

       ########################################################
       #                        CLEANUP                       #			      
       # (Tear down application, liveness configmap as well as#
       # the FI (chaoskube) infrastructure. Also stop logger) # 
       ########################################################

       - name: Terminate the log aggregator
         shell: source ~/.profile; killall stern
         args:
           executable: /bin/bash 
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"  

       - set_fact:
           flag: "Pass"

     rescue: 
       - set_fact: 
           flag: "Fail"

     always:
       - include: test-ctrl-failure-cleanup.yml
         when: clean | bool

       - name: Send slack notification
         slack: 
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN')

