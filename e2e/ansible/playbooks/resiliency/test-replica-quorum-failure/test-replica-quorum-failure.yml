- hosts: localhost
 
  vars_files: 
    - test-replica-quorum-failure-vars.yml 
 
  tasks:
   - block:

       ###################################################
       #                PREPARE FOR TEST                 #
       # (Place artifacts in kubemaster, start logger &  # 
       # confirm OpenEBS operator is ready for requests. #
       ###################################################

       - name: Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args: 
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Copy the percona spec and liveness script to kubemaster 
         copy:
           src: "{{ item }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         with_items: "{{ percona_files }}"

       - name: Copy the fault injection specs to kubemaster  
         copy:
           src: "{{ fault_injection_file }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Copy the storage class specs to kubemaster  
         copy:
           src: "{{ storage_class_file }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source ~/.profile;
           nohup stern "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" &
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Check whether maya-apiserver pod is deployed
         shell: source ~/.profile; kubectl get pods | grep maya-apiserver
         args: 
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"    
         until: "'Running' in result.stdout"
         delay: 120 
         retries: 5
      
       ####################################################
       #          SETUP FAULT-INJECTION ENV               #
       # (Setup chaoskube deployment with an empty policy,#
       # deploy percona w/ a liveness check for DB writes)# 
       ####################################################

       - name: Setup the storage class
         shell: source ~/.profile; kubectl apply -f {{ storage_class_file }} 
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Create a configmap with the liveness sql script 
         shell: source ~/.profile; kubectl create configmap sqltest --from-file={{ percona_files.1 }} 
         args: 
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result 
         failed_when: "'configmap' and 'created' not in result.stdout"

       - name: Create percona deployment with OpenEBS storage
         shell: source ~/.profile; kubectl apply -f {{ percona_files.0 }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Wait for 120s to ensure liveness check starts 
         wait_for:
           timeout: 120
         
       - name: Confirm percona pod is running
         shell: source ~/.profile; kubectl get pods --no-headers -l name=percona   
         args: 
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 120 
         retries: 15

       - name: Get the name of the volume replica deployment 
         shell: > 
           source ~/.profile; kubectl get deployments 
           -l openebs/replica=jiva-replica --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_deploy

       - name: Set the replica deployment name to variable 
         set_fact: 
           replica_deploy: "{{ result_deploy.stdout_lines[0].split()[0] }}"

       ########################################################
       #        INJECT FAULTS FOR SPECIFIED PERIOD            #
       # (Obtain begin marker before fault-inject(FI),do ctrl # 
       # failures, verify successful FI via end marker)       # 
       ########################################################
       - name: Populate the iterator with the values to loop
         shell: >
           shuf -i 1-100 -n {{interval}}
         args:
           executable: /bin/bash
         register: iterator

       - include: inject_replica_quorum_failure.yml
         with_items: "{{ iterator.stdout_lines }}"

       ########################################################
       #        VERIFY RESILINCY/FAULT-TOLERATION             #
       # (Confirm liveness checks on percona are successful & #
       # pod is still in running state)                       #
       ########################################################

       - name: Confirm percona application is still running
         shell: source ~/.profile; kubectl get pods --no-headers -l name=percona   
         args: 
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 120 
         retries: 15

       ########################################################
       #                        CLEANUP                       #			      
       # (Tear down application, liveness configmap as well as#
       # the FI (chaoskube) infrastructure. Also stop logger) # 
       ########################################################

       - include: test-replica-quorum-failure-cleanup.yml
         when: clean | bool

       - name: Terminate the log aggregator
         shell: source ~/.profile; killall stern
         args:
           executable: /bin/bash 
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"  

       - set_fact:
           flag: "Pass"

     rescue: 
       - set_fact: 
           flag: "Fail"

     always:
       - name: Send slack notification
         slack: 
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN')

