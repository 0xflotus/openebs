---
- name: Get pvc name to verify successful pvc deletion
  shell: source ~/.profile; kubectl get pvc | grep {{ replace_with.0 }} | awk {'print $3'}
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: pvc

- name: Delete percona mysql pod
  include_tasks: "{{ localhost_home.stdout }}/{{utils_path}}/delete_deploy.yml"
  vars:
    app_yml: "{{ percona_files.0 }}"

- name: Check status of percona
  include_tasks: "{{ localhost_home.stdout }}/{{utils_path}}/delete_deploy_check.yml"
  vars:
    app: percona

- name: Confirm pvc pod has been deleted
  shell: source ~/.profile; kubectl get pods | grep {{ pvc.stdout }}
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: result
  failed_when: "'pvc' and 'Running' in result.stdout"
  delay: 30
  retries: 10

- name: Remove the percona liveness check config map 
  shell: source ~/.profile; kubectl delete cm sqltest 
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: result
  failed_when: "'configmap' and 'deleted' not in result.stdout"

- name: Delete the chaoskube infrastructure
  include_tasks: "{{ localhost_home.stdout }}/{{utils_path}}/delete_deploy.yml"
  vars:
    app_yml: "{{ chaoskube_files }}"

- name: Confirm that the chaoskube pod has been deleted
  shell: source ~/.profile; kubectl get pods -l app=chaoskube
  args: 
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: result
  until: "'chaoskube' not in result.stdout"

- name: Confirm the chaoskube sa has been deleted
  shell: >
    source ~/.profile; 
    kubectl get sa --no-headers -o custom-columns=:metadata.name
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: result
  failed_when: "'chaoskube' in result.stdout"

- name: Confirm the chaoskube clusterrolebinding has been deleted
  shell: >
    source ~/.profile;
    kubectl get clusterrolebinding --no-headers -o custom-columns=:metadata.name
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: result
  failed_when: "'chaoskube' in result.stdout"

- name: Remove test artifacts
  shell: rm -rf {{ item.0 }}; rm -rf {{ item.1 }}
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  with_together:
    - "{{percona_files}}"
    - "{{chaoskube_files}}"
  
 
 
