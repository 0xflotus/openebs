---
- name: Delete percona application deployed with snapped pvc
  shell: source ~/.profile; kubectl delete -f "{{ percona }}"
  args:
    executable: /bin/bash
  register: delete_percona
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'pod \"percona-new\" deleted' in delete_percona.stdout"
  delay: 30
  retries: 15

- name: Check if the percona pod has been deleted
  shell: source ~/.profile; kubectl get pods
  args:
    executable: /bin/bash
  register: pods
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'percona-new' not in pods.stdout"
  delay: 30
  retries: 15

- name: Delete the snapshot claim
  shell: source ~/.profile; kubectl delete -f "{{ snapshot_claim }}"
  args:
    executable: /bin/bash
  register: delete_claim
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'persistentvolumeclaim \"demo-snap-vol-claim\" deleted' in delete_claim.stdout"
  delay: 20
  retries: 5

- name: Delete volume snapshot
  shell: source ~/.profile; kubectl delete -f "{{ snapshot }}"
  args:
    executable: /bin/bash
  register: delete_sp
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'volumesnapshot \"snapshot-demo\" deleted' in delete_sp.stdout"
  delay: 20
  retries: 5

- name: Delete snapshot promoter sc
  shell: source ~/.profile; kubectl delete -f "{{ snapshot_sc }}"
  args:
    executable: /bin/bash
  register: delete_sc
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'storageclass \"snapshot-promoter\" deleted' in delete_sc.stdout"
  delay: 20
  retries: 5

- name: Delete snapshot-controller
  shell: source ~/.profile; kubectl delete -f "{{ snapshot_operator }}"
  args:
    executable: /bin/bash
  register: delete_pod
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'deployment \"snapshot-controller\" deleted' in delete_pod.stdout"
  delay: 20
  retries: 5

- name: Checking if the snapshot controller has been deleted.
  shell: source ~/.profile; kubectl get pods
  args:
    executable: /bin/bash
  register: list_pods
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'snapshot-controller' not in list_pods.stdout"
  delay: 30
  retries: 15

- name: Delete the percona pod which was created before capturing snaphshot
  shell: source ~/.profile; kubectl delete -f "{{ percona_link }}"
  args:
    executable: /bin/bash
  register: delete_percona_out
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'pod \"percona\" deleted' in delete_percona_out.stdout"
  delay: 30
  retries: 15

- name: Check if the pod has been deleted
  shell: source ~/.profile; kubectl get pods
  args:
    executable: /bin/bash
  register: result
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'percona' not in result.stdout"
  delay: 30
  retries: 15

- name: Delete volume snapshot crds
  shell: source ~/.profile; kubectl delete crd volumesnapshotdatas.volumesnapshot.external-storage.k8s.io volumesnapshots.volumesnapshot.external-storage.k8s.io
  args:
    executable: /bin/bash
  register: crd_out
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: "'deleted' in crd_out.stdout"
  delay: 30
  retries: 15

- name: Remove snapshot specific files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ snapshot_files }}"
    - "{{ percona }}"
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
